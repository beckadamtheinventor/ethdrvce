	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_nibble
_nibble:
	call	__frameset0
	ld	hl, (ix + 6)
	ld.sis	de, -48
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	add.sis	iy, de
	ld.sis	de, 10
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, de
	jp	c, BB0_7
	ld.sis	de, -65
	ld	hl, (ix + 6)
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	add.sis	iy, de
	ld.sis	de, 6
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, de
	jr	nc, BB0_3
	ld	a, iyl
	jp	BB0_5
BB0_3:
	ld.sis	bc, -97
	ld	hl, (ix + 6)
	add.sis	hl, bc
	push	hl
	pop	bc
	or	a, a
	sbc.sis	hl, de
	jr	nc, BB0_6
	ld	a, c
BB0_5:
	add	a, 10
	ld	iyl, a
	jr	BB0_7
BB0_6:
	ld	iyl, -1
BB0_7:
	ld	a, iyl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_interrupt_receive_callback
_interrupt_receive_callback:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_usb_GetEndpointData
	push	hl
	pop	bc
	pop	hl
	ld	de, 449
	push	bc
	pop	iy
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	(iy), hl
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 3), bc
	jp	nz, BB1_9
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB1_10
	ld	iy, 0
BB1_3:
	ld	(ix - 6), iy
	lea	bc, iy
	ld	hl, _eth_int_buf
	add	hl, bc
	push	hl
	pop	bc
	ld	a, (hl)
	cp	a, -95
	jp	nz, BB1_8
	push	bc
	pop	iy
	ld	a, (iy + 1)
	or	a, a
	jp	nz, BB1_8
	push	bc
	pop	iy
	ld	hl, (iy + 2)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	ld	l, 1
	jr	nz, BB1_7
	ld	l, 0
BB1_7:
	ld	iy, (ix - 3)
	ld	de, 452
	add	iy, de
	ld	a, (iy)
	and	a, -2
	add	a, l
	ld	(iy), a
BB1_8:
	push	bc
	pop	iy
	ld	hl, (iy + 6)
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	de, 8
	ld	iy, (ix - 6)
	add	iy, de
	add	iy, bc
	lea	hl, iy
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	jp	c, BB1_3
	jr	BB1_10
BB1_9:
	ld	hl, 5
	push	bc
	pop	iy
	add	iy, de
	ld	(iy), hl
BB1_10:
	ld	iy, (ix - 3)
	ld	hl, (iy + 16)
	ld	de, (iy + 25)
	ld	bc, 0
	push	bc
	push	de
	ld	de, 64
	push	de
	ld	de, _eth_int_buf
	push	de
	push	hl
	call	_usb_ScheduleTransfer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_eth_tx_callback
_eth_tx_callback:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_usb_GetEndpointData
	pop	de
	ld	de, 449
	ld	(ix - 6), hl
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jr	z, BB2_2
	ld	hl, 5
BB2_2:
	ld	(iy), hl
	ld	hl, (_usr_free)
	ld	de, (ix + 15)
	push	de
	ld	(ix - 3), iy
	call	__indcallhl
	pop	hl
	ld	hl, (ix - 3)
	ld	de, (hl)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_5
	ld	iy, (ix - 6)
	ld	hl, (iy + 28)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_5
	push	de
	call	__indcallhl
	pop	hl
BB2_5:
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ecm_receive_callback
_ecm_receive_callback:
	ld	hl, -12
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_usb_GetEndpointData
	push	hl
	pop	iy
	pop	hl
	ld	bc, 449
	lea	de, iy
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	(iy), hl
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 416
	ld	(ix - 3), de
	jr	nz, BB3_4
	ld	(ix - 6), iy
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	de
	pop	iy
	jr	z, BB3_8
	ld	de, 3
	ld	iy, (_usr_malloc)
	ld	hl, (ix + 12)
	add	hl, de
	push	hl
	call	__indcall
	pop	de
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB3_12
	ld	hl, 7
	ld	(ix - 6), hl
	ld	hl, (ix - 3)
	ld	bc, 416
	jr	BB3_5
BB3_4:
	ld	hl, 5
	ld	(ix - 6), hl
	ex	de, hl
BB3_5:
	push	hl
	pop	iy
	ld	de, 449
	add	iy, de
	ld	de, (ix - 6)
	ld	(iy), de
	push	hl
	pop	iy
BB3_6:
	ld	hl, (iy + 28)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB3_8
	push	de
	call	__indcallhl
	ld	bc, 416
	ld	iy, (ix - 3)
	pop	hl
BB3_8:
	lea	de, iy
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	push	de
	pop	iy
	add	iy, bc
	ld	hl, (iy + 32)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB3_10
	ld	hl, 0
	ld	iy, (ix - 3)
	ld	bc, (iy + 13)
	ld	de, (iy + 22)
	push	hl
	push	de
	ld	hl, 1518
	push	hl
	ld	hl, _eth_rx_buf
	push	hl
	push	bc
	call	_usb_ScheduleTransfer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	jr	BB3_11
BB3_10:
	ld	iy, (ix - 3)
	ld	(iy + 31), 0
BB3_11:
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
BB3_12:
	push	de
	pop	iy
	ld	hl, (ix + 12)
	ld	(iy), hl
	ld	(ix - 9), iy
	push	hl
	ld	hl, _eth_rx_buf
	push	hl
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix - 3)
	push	de
	pop	iy
	ld	hl, 416
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 12), iy
	ld	a, (iy)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	push	de
	pop	iy
	add	iy, bc
	ld	bc, 416
	ld	hl, (ix - 9)
	ld	(iy + 32), hl
	push	de
	pop	iy
	inc	a
	and	a, 127
	ld	hl, (ix - 12)
	ld	(hl), a
	ld	hl, (ix - 6)
	ld	de, (hl)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB3_6
	jp	BB3_8
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ecm_bulk_transmit
_ecm_bulk_transmit:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 12)
	ld	de, 3
	ld	iy, (_usr_malloc)
	add	hl, de
	push	hl
	call	__indcall
	ld	bc, (ix + 12)
	push	hl
	pop	iy
	pop	hl
	ld	de, 1519
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	nc, BB4_3
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB4_7
	ld	de, 7
	jr	BB4_4
BB4_3:
	ld	de, 8
BB4_4:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	bc, 449
	add	iy, bc
	ld	(iy), de
BB4_5:
	ld	iy, (ix + 6)
	ld	hl, (iy + 28)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB4_8
	push	de
	call	__indcallhl
	pop	hl
	jr	BB4_8
BB4_7:
	ld	hl, (ix + 9)
	ld	(iy), bc
	lea	de, iy + 3
	ld	(ix - 3), de
	push	bc
	push	hl
	push	de
	ld	(ix - 6), iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 10)
	ld	de, (ix - 6)
	push	de
	ld	de, _eth_tx_callback
	push	de
	ld	de, (ix + 12)
	push	de
	ld	de, (ix - 3)
	push	de
	push	hl
	call	_usb_ScheduleTransfer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 449
	ld	iy, (ix + 6)
	add	iy, de
	ld	de, (iy)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB4_5
BB4_8:
	xor	a, a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ncm_control_setup
_ncm_control_setup:
	ld	hl, -44
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 0
	ld.sis	hl, 0
	lea	de, ix - 3
	ld	(ix - 38), de
	ld	de, 32929
	ld	(ix - 11), de
	ld	(ix - 8), bc
	ld.sis	de, 28
	ld	(ix - 5), e
	ld	(ix - 4), d
	ld	(ix - 19), 33
	ld	(ix - 18), -122
	ld	(ix - 17), l
	ld	(ix - 16), h
	ld	(ix - 15), l
	ld	(ix - 14), h
	ld	de, 448
	add	iy, de
	ld	(ix - 41), iy
	bit	4, (iy)
	jr	z, BB5_2
	ld.sis	de, 8
	jr	BB5_3
BB5_2:
	ld.sis	de, 4
BB5_3:
	ld	(ix - 13), e
	ld	(ix - 12), d
	ld	de, 82721
	ld	(ix - 27), de
	ld	(ix - 24), bc
	ld	(ix - 21), l
	ld	(ix - 20), h
	ld	de, 2048
	ld	(ix - 35), de
	ld	de, 1024
	ld	(ix - 32), de
	ld	(ix - 29), l
	ld	(ix - 28), h
	ld	hl, (ix + 6)
	ld	hl, (hl)
	push	bc
	push	hl
	call	_usb_GetDeviceEndpoint
	pop	de
	pop	de
	ld	de, 418
	ld	iy, (ix + 6)
	add	iy, de
	ld	de, (ix - 38)
	push	de
	ld	de, 3
	push	de
	push	iy
	pea	ix - 11
	push	hl
	call	_usb_ControlTransfer
	ld	(ix - 44), hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	ld	hl, (hl)
	ld	de, 0
	push	de
	push	hl
	call	_usb_GetDeviceEndpoint
	pop	de
	pop	de
	ld	de, (ix - 38)
	push	de
	ld	de, 3
	push	de
	pea	ix - 35
	pea	ix - 19
	push	hl
	call	_usb_ControlTransfer
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	ld	bc, (ix - 44)
	call	__ior
	push	hl
	pop	bc
	ld	hl, (ix - 41)
	ld	a, (hl)
	and	a, 1
	bit	0, a
	jr	z, BB5_5
	ld	hl, (ix + 6)
	ld	hl, (hl)
	ld	de, 0
	push	de
	push	hl
	ld	(ix - 41), bc
	call	_usb_GetDeviceEndpoint
	pop	de
	pop	de
	ld	de, (ix - 38)
	push	de
	ld	de, 3
	push	de
	ld	de, 0
	push	de
	pea	ix - 27
	push	hl
	call	_usb_ControlTransfer
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	ld	bc, (ix - 41)
	call	__ior
	push	hl
	pop	bc
BB5_5:
	push	bc
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ncm_receive_callback
_ncm_receive_callback:
	ld	hl, -19
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_usb_GetEndpointData
	push	hl
	pop	iy
	pop	hl
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB6_18
	ld	hl, (ix + 12)
	ld	a, (_eth_rx_buf+3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB6_19
	ld	bc, 5063502
	ld	d, 72
	ld	hl, (_eth_rx_buf)
	ld	e, a
	ld	a, d
	call	__lcmpu
	jp	nz, BB6_19
	ld	hl, _eth_rx_buf+10
	ld	a, 48
	ld	b, 1
	ld	hl, (hl)
	ld	de, 0
	ld	e, l
	ld	d, h
	lea	hl, iy + 32
	ld	(ix - 6), hl
	ld	(ix - 3), iy
BB6_4:
	ld	(ix - 10), b
	ld	iy, _eth_rx_buf
	add	iy, de
	ld	hl, (iy)
	ld	e, (iy + 3)
	ld	bc, 5063502
	call	__lcmpu
	jp	nz, BB6_19
	lea	hl, iy + 8
	ld	(ix - 16), hl
	ld	(ix - 19), iy
	ld	hl, (iy + 10)
	ld	iy, 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ld.sis	hl, 1
BB6_6:
	ld	(ix - 9), hl
	ld	hl, (_usr_malloc)
	ld	de, 3
	add	iy, de
	push	iy
	call	__indcallhl
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB6_10
	ld	bc, (ix - 9)
	dec.sis	bc
	or	a, a
	sbc	hl, hl
	ld	l, c
	ld	h, b
	ld	a, 2
	ld	c, a
	call	__ishl
	push	hl
	pop	bc
	ld	(ix - 13), de
	ld	iy, (ix - 16)
	add	iy, bc
	ld	hl, (iy + 2)
	ld	de, 0
	push	de
	pop	bc
	ld	e, l
	ld	d, h
	ld	hl, (ix - 13)
	ld	(hl), de
	ld	hl, (iy)
	ld	c, l
	ld	b, h
	ld	iy, _eth_rx_buf
	add	iy, bc
	push	de
	push	iy
	ld	iy, (ix - 13)
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix - 3)
	ld	de, 416
	add	iy, de
	ld	a, (iy)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 6)
	add	hl, de
	ld	de, (ix - 13)
	ld	(hl), de
	inc	a
	and	a, 127
	ld	(iy), a
	ld	iy, (ix - 16)
	ld	a, 2
	ld	de, 0
	ld	hl, (ix - 9)
	ld	e, l
	ld	d, h
	push	de
	pop	hl
	ld	c, a
	call	__ishl
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	ld	hl, (hl)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jp	z, BB6_9
	ex	de, hl
	ld	c, a
	call	__ishl
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy + 2)
	ld	iy, 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ld	de, (ix - 9)
	inc.sis	de
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	ld	l, e
	ld	h, d
	jp	nz, BB6_6
BB6_9:
	ld	b, (ix - 10)
	jr	BB6_11
BB6_10:
	ld	iy, (ix - 3)
	ld	bc, 449
	add	iy, bc
	ld	hl, 7
	ld	(iy), hl
	dec	b
BB6_11:
	ld	iy, (ix - 19)
	ld	hl, (iy + 6)
	ld	a, b
	and	a, 1
	ld	c, a
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	ld	iy, (ix - 3)
	ld	a, 48
	ld	de, 0
	jr	z, BB6_13
	ld	e, l
	ld	d, h
	bit	0, c
	jp	nz, BB6_4
BB6_13:
	ld	iy, (ix - 3)
	ld	de, 449
	add	iy, de
	ld	de, (iy)
	ld	iy, (ix - 3)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB6_16
	ld	hl, (iy + 28)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB6_16
	push	de
	call	__indcallhl
	ld	iy, (ix - 3)
	pop	hl
BB6_16:
	ld	de, 416
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 6)
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB6_20
	ld	iy, (ix - 3)
	ld	hl, (iy + 13)
	ld	de, (iy + 22)
	ld	bc, 0
	push	bc
	push	de
	ld	de, 2048
	push	de
	ld	de, _eth_rx_buf
	push	de
	push	hl
	call	_usb_ScheduleTransfer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	jr	BB6_19
BB6_18:
	ld	hl, 5
	ld	de, 449
	add	iy, de
	ld	(iy), hl
BB6_19:
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
BB6_20:
	ld	iy, (ix - 3)
	ld	(iy + 31), 0
	jr	BB6_19
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ncm_bulk_transmit
_ncm_bulk_transmit:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 12)
	ld	de, 64
	add	hl, de
	ld	iy, (_usr_malloc)
	ld	(ix - 6), hl
	push	hl
	call	__indcall
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB7_2
	ld	de, 7
	ld	bc, 449
	ld	iy, (ix + 6)
	add	iy, bc
	ld	(iy), de
	jp	BB7_3
BB7_2:
	ld	de, (ix - 6)
	push	de
	ld	de, 0
	push	de
	push	hl
	ld	(ix - 3), hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	de, 430
	ld	iy, (ix + 6)
	add	iy, de
	ld	bc, (iy)
	ld	iyl, c
	ld	iyh, b
	ld.sis	de, 12
	add.sis	iy, de
	ld	l, e
	ld	h, d
	call	__sremu
	ld	e, l
	ld	d, h
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, de
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	iy, (ix - 3)
	ld	hl, 5063502
	ld	(iy), hl
	ld	(iy + 3), 72
	ld.sis	hl, 12
	ld	(iy + 4), l
	ld	(iy + 5), h
	ld	de, 446
	ld	iy, (ix + 6)
	add	iy, de
	ld	hl, (iy)
	ld	e, l
	ld	d, h
	inc.sis	de
	ld	(iy), e
	ld	(iy + 1), d
	ld	iy, (ix - 3)
	ld	(iy + 6), l
	ld	(iy + 7), h
	ld	hl, (ix - 6)
	ld	(iy + 8), l
	ld	(iy + 9), h
	ld	(iy + 10), c
	ld	(iy + 11), b
	ld	iy, (ix - 3)
	add	iy, bc
	ld	hl, 5063502
	ld	(iy), hl
	ld	(iy + 3), 48
	ld.sis	hl, 16
	ld	(iy + 4), l
	ld	(iy + 5), h
	ld.sis	bc, 0
	ld	(iy + 6), c
	ld	(iy + 7), b
	ld.sis	hl, 64
	ld	(iy + 8), l
	ld	(iy + 9), h
	ld	hl, (ix + 12)
	push	hl
	pop	de
	ld	(iy + 10), l
	ld	(iy + 11), h
	ld	(iy + 12), c
	ld	(iy + 13), b
	ld	(iy + 14), c
	ld	(iy + 15), b
	push	de
	ld	hl, (ix + 9)
	push	hl
	ld	iy, (ix - 3)
	pea	iy + 64
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 10)
	ld	bc, (ix - 3)
	push	bc
	ld	de, _eth_tx_callback
	push	de
	ld	de, (ix - 6)
	push	de
	push	bc
	push	hl
	call	_usb_ScheduleTransfer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 449
	ld	iy, (ix + 6)
	add	iy, de
	ld	de, (iy)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB7_5
BB7_3:
	ld	iy, (ix + 6)
	ld	hl, (iy + 28)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB7_5
	push	de
	call	__indcallhl
	pop	hl
BB7_5:
	xor	a, a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_eth_UsbCheckConfigureHubs
_eth_UsbCheckConfigureHubs:
	ld	hl, -274
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_usb_GetDeviceFlags
	pop	de
	ld	a, l
	bit	3, a
	ld	a, 0
	jp	z, BB8_5
	ld	bc, -265
	lea	iy, ix
	add	iy, bc
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy + 3
	ld	bc, -268
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_usb_GetConfigurationDescriptorTotalLength
	push	hl
	pop	de
	ld	bc, -274
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	pop	hl
	pop	hl
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	push	de
	ld	bc, -268
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_usb_GetDescriptor
	ld	de, -274
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, -271
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	de, (iy)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB8_3
	ld	a, 0
	jr	BB8_4
BB8_3:
	ld	a, -1
BB8_4:
	ld	(ix - 3), de
	ld	de, -271
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	push	bc
	pop	hl
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	hl, (ix + 6)
	push	bc
	ld	bc, -268
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy)
	push	de
	push	hl
	call	z, _usb_SetConfiguration
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	a, (hl)
BB8_5:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_eth_SetAllocator
_eth_SetAllocator:
	call	__frameset0
	ld	bc, (ix + 6)
	ld	de, (ix + 9)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB9_3
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB9_3
	ld	(_usr_malloc), bc
	ld	(_usr_free), de
BB9_3:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	c, -1
	ld	b, 0
	ld	a, c
	jr	nz, BB9_5
	ld	a, b
BB9_5:
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB9_7
	ld	c, b
BB9_7:
	and	a, c
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_eth_Open
_eth_Open:
	ld	hl, -612
	call	__frameset
	ld	hl, (ix + 6)
	ld	(hl), 0
	push	hl
	pop	iy
	inc	iy
	ld	bc, 452
	lea	de, iy
	push	hl
	pop	iy
	ldir
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB10_2
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_4
BB10_2:
	ld	hl, 1
BB10_3:
	ld	sp, ix
	pop	ix
	ret
BB10_4:
	ld	bc, -276
	lea	iy, ix
	add	iy, bc
	lea	de, ix - 9
	push	ix
	ld	bc, -546
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -549
	add	ix, bc
	ld	(ix), iy
	pop	ix
	lea	de, iy + 11
	ld	bc, -543
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	hl
	call	_usb_RefDevice
	pop	hl
	ld	bc, -546
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, 18
	push	hl
	ld	bc, -543
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	inc	hl
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_GetDescriptor
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_6
	ld	hl, (ix - 9)
	ld	de, 18
	or	a, a
	sbc	hl, de
	jr	z, BB10_7
BB10_6:
	ld	hl, 2
	jp	BB10_3
BB10_7:
	ld	bc, -549
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy + 15)
	or	a, a
	jp	nz, BB10_66
	ld	bc, -540
	lea	hl, ix
	add	hl, bc
	push	hl
	pop	de
	ld	hl, _ecm_receive_callback
	push	ix
	ld	bc, -571
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, _ncm_receive_callback
	push	ix
	ld	bc, -559
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, _ecm_bulk_transmit
	push	ix
	ld	bc, -568
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, _ncm_bulk_transmit
	push	ix
	ld	bc, -562
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 2048
	push	ix
	ld	bc, -583
	add	ix, bc
	ld	(ix), hl
	pop	ix
	lea	hl, iy
	push	ix
	ld	bc, -565
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -577
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	lea	hl, iy
	push	de
	pop	iy
	lea	de, iy + 8
	push	hl
	pop	iy
	ld	c, (iy + 28)
	ld	iy, (ix + 6)
	lea	hl, iy + 4
	ld	(ix - 3), bc
	ld	bc, -574
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	de
	pop	iy
	ld	bc, -580
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy + 4
	ld	bc, -586
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, 0
	ld	e, a
	push	ix
	ld	bc, -556
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (ix + 9)
	ld	bc, (ix - 3)
BB10_9:
	ld	a, e
	cp	a, c
	jp	z, BB10_88
	ld	(ix - 3), de
	ld	de, -553
	lea	iy, ix
	add	iy, de
	ld	(iy), c
	ld	de, (ix - 3)
	push	de
	push	hl
	ld	bc, -552
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	call	_usb_GetConfigurationDescriptorTotalLength
	push	hl
	pop	bc
	pop	hl
	pop	hl
	push	bc
	pop	hl
	ld	de, 257
	or	a, a
	sbc	hl, de
	jp	nc, BB10_63
	ld	de, -546
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	push	bc
	ld	de, -543
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -552
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	hl, 2
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	de, -589
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	call	_usb_GetDescriptor
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB10_63
	ld	hl, (ix - 9)
	ld	bc, -589
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	or	a, a
	sbc	hl, de
	ld	de, -553
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	c, (hl)
	jp	nz, BB10_64
	xor	a, a
	ld	b, a
	ld	de, -593
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	ld	de, -543
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	push	ix
	ld	de, -592
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	iy, 0
BB10_14:
	lea	hl, iy
	ld	(ix - 3), bc
	push	ix
	ld	bc, -589
	add	ix, bc
	ld	de, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jp	nc, BB10_64
	ld	de, -596
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	ld	de, -592
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	a, (iy + 1)
	cp	a, 4
	ld	(ix - 3), bc
	ld	bc, -556
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy)
	ld	bc, (ix - 3)
	jp	nz, BB10_21
	ld	de, -593
	lea	hl, ix
	add	hl, de
	bit	2, (hl)
	jp	nz, BB10_25
	ld	de, -592
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	a, (iy + 5)
	cp	a, 2
	jp	nz, BB10_32
	ld	a, (iy + 6)
	cp	a, 6
	jr	z, BB10_20
	cp	a, 13
	jp	nz, BB10_32
BB10_20:
	ld	iy, (ix + 6)
	ld	(iy + 3), a
	ld	de, -589
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -543
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	de, -597
	lea	hl, ix
	add	hl, de
	ld	(hl), b
	call	_usb_SetConfiguration
	ld	de, -597
	lea	iy, ix
	add	iy, de
	ld	b, (iy)
	push	ix
	ld	de, -553
	add	ix, de
	ld	c, (ix)
	pop	ix
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	push	ix
	ld	de, -593
	push	af
	add	ix, de
	pop	af
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -596
	push	af
	add	ix, de
	pop	af
	ld	iy, (ix)
	pop	ix
	jp	nz, BB10_88
	jp	BB10_62
BB10_21:
	cp	a, 5
	ld	(ix - 3), bc
	ld	bc, -593
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	h, (hl)
	ld	bc, (ix - 3)
	jp	nz, BB10_29
	bit	3, h
	jp	nz, BB10_35
	ld	a, h
	and	a, 1
	bit	0, a
	jp	z, BB10_53
	ld	de, -592
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	a, (iy + 2)
	ld	de, -599
	lea	iy, ix
	add	iy, de
	ld	(iy), a
	ld	a, h
	or	a, 16
	ld	de, -593
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	jp	BB10_60
BB10_25:
	ld	de, -592
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	a, (iy + 2)
	cp	a, b
	jp	nz, BB10_53
	ld	a, (iy + 4)
	cp	a, 2
	jp	nz, BB10_53
	ld	a, (iy + 5)
	cp	a, 10
	jp	nz, BB10_53
	ld	de, -589
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, -596
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	de, iy
	or	a, a
	sbc	hl, de
	push	ix
	ld	de, -602
	add	ix, de
	ld	(ix), hl
	pop	ix
	push	ix
	ld	de, -593
	add	ix, de
	ld	a, (ix)
	pop	ix
	or	a, 8
	push	ix
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	inc	de
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -605
	add	ix, de
	ld	(ix), hl
	jp	BB10_61
BB10_29:
	cp	a, 36
	jp	nz, BB10_53
	ld	de, -592
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	a, (iy + 2)
	cp	a, 6
	jp	nz, BB10_45
	ld	b, (iy + 4)
	ld	a, h
	or	a, 4
	jr	BB10_33
BB10_32:
	xor	a, a
BB10_33:
	ld	de, -593
	lea	hl, ix
	add	hl, de
	ld	(hl), a
BB10_34:
	ld	de, -596
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	jp	BB10_62
BB10_35:
	ld	(ix - 3), bc
	ld	bc, -592
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	a, (iy + 2)
	ld	bc, -597
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	cp	a, 0
	call	pe, __setflag
	ld	l, -1
	ld	bc, (ix - 3)
	jp	p, BB10_37
	ld	l, 0
BB10_37:
	bit	0, l
	ld	a, 64
	jr	nz, BB10_39
	ld	a, 32
BB10_39:
	or	a, h
	ld	h, a
	bit	0, l
	ld	(ix - 3), bc
	ld	bc, -596
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	iy, (iy)
	ld	bc, (ix - 3)
	jr	nz, BB10_41
	ld	(ix - 3), bc
	push	ix
	ld	bc, -597
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
BB10_41:
	bit	0, l
	jr	nz, BB10_43
	ld	(ix - 3), bc
	push	ix
	ld	bc, -598
	add	ix, bc
	ld	a, (ix)
	pop	ix
	push	ix
	inc	bc
	add	ix, bc
	ld	(ix), a
	pop	ix
	ld	bc, (ix - 3)
BB10_43:
	ld	a, h
	and	a, 114
	cp	a, 114
	ld	(ix - 3), bc
	push	ix
	ld	bc, -556
	push	af
	add	ix, bc
	pop	af
	ld	(ix), de
	pop	ix
	ld	bc, (ix - 3)
	jp	z, BB10_67
	push	ix
	ld	de, -593
	add	ix, de
	ld	(ix), h
	pop	ix
	ld	de, -597
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	push	ix
	dec	de
	add	ix, de
	ld	(ix), a
	jp	BB10_61
BB10_45:
	cp	a, 15
	jp	nz, BB10_51
	ld	de, -597
	lea	hl, ix
	add	hl, de
	ld	(hl), b
	ld	bc, -549
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	hl, 33185
	ld	(iy + 3), hl
	or	a, a
	sbc	hl, hl
	ld	(iy + 6), hl
	ld.sis	hl, 6
	ld	(iy + 9), l
	ld	(iy + 10), h
	ld	bc, -592
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	l, (iy + 3)
	ld	a, l
	or	a, a
	jp	z, BB10_54
	ld	bc, -565
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	ld	de, 256
	push	de
	push	ix
	ld	bc, -580
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	ld	de, 0
	push	de
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_GetStringDescriptor
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB10_54
	ld	de, -586
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	or	a, a
	sbc	hl, hl
	ld	de, -608
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
BB10_49:
	ld	de, -608
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, 6
	or	a, a
	sbc	hl, de
	jp	z, BB10_55
	push	bc
	pop	iy
	ld	bc, -611
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	hl, (iy - 2)
	push	hl
	call	_nibble
	pop	hl
	ld	b, 4
	call	__bshl
	ld	de, -612
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	inc	de
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	ld	hl, (hl)
	push	hl
	call	_nibble
	pop	hl
	ld	bc, -612
	lea	hl, ix
	add	hl, bc
	or	a, (hl)
	ld	bc, -574
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -608
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	ld	(hl), a
	inc	de
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	de, -611
	add	ix, de
	ld	iy, (ix)
	pop	ix
	lea	iy, iy + 4
	lea	bc, iy
	jp	BB10_49
BB10_51:
	cp	a, 26
	jr	nz, BB10_53
	ld	de, -592
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	a, (iy + 5)
	ld	iy, (ix + 6)
	ld	de, 448
	add	iy, de
	ld	(iy), a
	jp	BB10_34
BB10_53:
	ld	de, -596
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	jp	BB10_62
BB10_54:
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_GetDeviceEndpoint
	pop	de
	pop	de
	ld	bc, -565
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	ld	de, 3
	push	de
	push	ix
	ld	bc, -574
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -549
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	pea	iy + 3
	push	hl
	call	_usb_ControlTransfer
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_56
BB10_55:
	ld	de, -593
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	or	a, 2
	lea	iy, ix
	add	iy, de
	ld	(iy), a
	push	ix
	ld	de, -553
	add	ix, de
	ld	c, (ix)
	pop	ix
	jp	BB10_59
BB10_56:
	ld	bc, -577
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, 33313
	ld	(iy), hl
	or	a, a
	sbc	hl, hl
	ld	(iy + 3), hl
	ld.sis	hl, 6
	ld	(iy + 6), l
	ld	(iy + 7), h
	call	_random
	ld	bc, -608
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	call	_random
	ld	iy, (ix + 6)
	push	ix
	ld	bc, -608
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	(iy + 4), de
	ld	(iy + 7), hl
	ld	a, e
	and	a, -4
	add	a, 2
	ld	(iy + 4), a
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_GetDeviceEndpoint
	pop	de
	pop	de
	ld	bc, -565
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	ld	de, 3
	push	de
	push	ix
	ld	bc, -574
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	ix
	ld	bc, -577
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	push	hl
	call	_usb_ControlTransfer
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	ld	bc, -593
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	or	a, 2
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB10_58
	ld	bc, -593
	lea	hl, ix
	add	hl, bc
	ld	a, (hl)
BB10_58:
	ld	de, -593
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	ld	de, -553
	lea	iy, ix
	add	iy, de
	ld	c, (iy)
BB10_59:
	push	ix
	ld	de, -597
	add	ix, de
	ld	b, (ix)
	pop	ix
BB10_60:
	push	ix
	ld	de, -596
	add	ix, de
	ld	iy, (ix)
BB10_61:
	pop	ix
BB10_62:
	ld	de, 0
	ld	(ix - 3), bc
	ld	bc, -592
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	e, (hl)
	add	iy, de
	add	hl, de
	push	ix
	ld	de, -592
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	jp	BB10_14
BB10_63:
	ld	hl, (ix + 9)
	ld	de, -553
	lea	iy, ix
	add	iy, de
	ld	c, (iy)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -552
	add	ix, bc
	ld	de, (ix)
	pop	ix
	jr	BB10_65
BB10_64:
	ld	hl, (ix + 9)
	ld	(ix - 3), bc
	ld	bc, -552
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
BB10_65:
	ld	bc, (ix - 3)
	inc	e
	jp	BB10_9
BB10_66:
	ld	hl, 4
	jp	BB10_3
BB10_67:
	ld	hl, (ix + 9)
	ld	iy, (ix + 6)
	ld	(iy), hl
	ld	a, (iy + 3)
	cp	a, 13
	jr	nz, BB10_70
	push	iy
	call	_ncm_control_setup
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 2
	jp	nz, BB10_3
	ld	iy, (ix + 6)
	ld	a, (iy + 3)
BB10_70:
	cp	a, 13
	ld	e, -1
	ld	c, 0
	ld	l, e
	jr	z, BB10_72
	ld	l, c
BB10_72:
	cp	a, 6
	jr	z, BB10_74
	ld	e, c
BB10_74:
	bit	0, e
	jr	nz, BB10_76
	ld	bc, 0
	ld	(ix - 3), de
	push	ix
	ld	de, -571
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	de, (ix - 3)
BB10_76:
	bit	0, l
	jr	nz, BB10_78
	ld	(ix - 3), de
	push	ix
	ld	de, -571
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -559
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	de, (ix - 3)
BB10_78:
	ld	(ix - 3), de
	push	ix
	ld	de, -559
	add	ix, de
	ld	bc, (ix)
	pop	ix
	ld	(iy + 22), bc
	ld	de, (ix - 3)
	bit	0, e
	jr	nz, BB10_80
	ld	de, 0
	push	ix
	ld	bc, -568
	add	ix, bc
	ld	(ix), de
	pop	ix
BB10_80:
	bit	0, l
	jr	nz, BB10_82
	ld	bc, -568
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -562
	add	ix, bc
	ld	(ix), hl
	pop	ix
BB10_82:
	ld	bc, -562
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(iy + 19), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_88
	ld	bc, -559
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_88
	ld	bc, -602
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -605
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_SetInterface
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB10_88
	ld	bc, -556
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_GetDeviceEndpoint
	pop	de
	pop	de
	ld	de, (ix + 6)
	push	de
	pop	iy
	ld	(iy + 13), hl
	ld	bc, -597
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_GetDeviceEndpoint
	pop	de
	pop	de
	ld	iy, (ix + 6)
	ld	(iy + 10), hl
	ld	bc, -599
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_GetDeviceEndpoint
	pop	de
	pop	de
	ld	iy, (ix + 6)
	ld	(iy + 16), hl
	ld	hl, (iy + 13)
	push	iy
	push	hl
	call	_usb_SetEndpointData
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 10)
	push	iy
	push	hl
	call	_usb_SetEndpointData
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 16)
	push	iy
	push	hl
	call	_usb_SetEndpointData
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_usb_SetDeviceData
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 31), 1
	ld	hl, (iy + 16)
	ld	de, 0
	push	de
	ld	de, _interrupt_receive_callback
	push	de
	ld	de, 64
	push	de
	ld	de, _eth_int_buf
	push	de
	push	hl
	call	_usb_ScheduleTransfer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 13)
	ld	a, (iy + 3)
	cp	a, 13
	jr	z, BB10_87
	ld	de, 1518
	ld	bc, -583
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
BB10_87:
	ld	iy, (ix + 6)
	ld	de, (iy + 22)
	ld	bc, 0
	push	bc
	push	de
	ld	bc, -583
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	push	de
	ld	de, _eth_rx_buf
	push	de
	push	hl
	call	_usb_ScheduleTransfer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB10_88:
	or	a, a
	sbc	hl, hl
	jp	BB10_3
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_eth_Write
_eth_Write:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	de, 1
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB11_6
	ld	bc, (ix + 9)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB11_6
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB11_6
	ld	hl, (iy + 19)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB11_5
	ld	de, 2
	jr	BB11_6
BB11_5:
	ld	de, (ix + 12)
	push	de
	push	bc
	push	iy
	call	__indcallhl
	pop	hl
	pop	hl
	pop	hl
	and	a, 1
	ld	de, 0
	ld	e, a
BB11_6:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_eth_Read
_eth_Read:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, 417
	push	de
	pop	iy
	add	iy, bc
	ld	a, (iy)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	push	de
	pop	iy
	add	iy, bc
	ld	hl, (iy + 32)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB12_2
	ld	bc, 0
	ld	hl, (ix + 9)
	ld	(hl), bc
	jr	BB12_3
BB12_2:
	lea	de, iy
	ld	iy, (ix + 9)
	ld	(iy), hl
	ld	bc, 0
	push	de
	pop	iy
	ld	(iy + 32), bc
	inc	a
	and	a, 127
	ld	iy, (ix + 6)
	ld	de, 417
	add	iy, de
	ld	(iy), a
BB12_3:
	ld	iy, (ix + 6)
	bit	0, (iy + 31)
	jr	nz, BB12_5
	ld	de, (iy + 13)
	ld	hl, (iy + 22)
	push	bc
	push	hl
	ld	hl, 2048
	push	hl
	ld	hl, _eth_rx_buf
	push	hl
	push	de
	call	_usb_ScheduleTransfer
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy + 31), 1
BB12_5:
	or	a, a
	sbc	hl, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_eth_Close
_eth_Close:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	ld	hl, (hl)
	push	hl
	call	_usb_ResetDevice
	pop	hl
	ld	de, 417
	ld	bc, 416
BB13_1:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy)
	add	hl, bc
	ld	l, (hl)
	cp	a, l
	jr	nc, BB13_3
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, (_usr_free)
	ld	(ix - 3), de
	inc	a
	ld	(iy), a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	add	iy, de
	ld	hl, (iy + 32)
	push	hl
	ld	hl, (ix - 3)
	call	__indcallhl
	ld	bc, 416
	ld	de, 417
	pop	hl
	jr	BB13_1
BB13_3:
	ld	hl, (ix + 6)
	ld	hl, (hl)
	push	hl
	call	_usb_UnrefDevice
	pop	hl
	ld	iy, (ix + 6)
	ld	(iy), 0
	lea	hl, iy
	inc	hl
	ld	bc, 452
	ex	de, hl
	lea	hl, iy
	ldir
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_eth_event_callback
_eth_event_callback:
	call	__frameset0
	ld	iy, (ix + 6)
	lea	bc, iy
	dec	bc
	ld	de, 4
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	c, BB14_3
	ld	de, 35
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	nz, BB14_11
	ld	hl, 5
	jr	BB14_12
BB14_3:
	ld	de, (ix + 9)
	ld	iy, _eth
	ld	hl, JTI14_0
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB14_4:
	push	iy
	call	_eth_Close
	jr	BB14_10
BB14_5:
	push	de
	call	_eth_UsbCheckConfigureHubs
	ld	l, a
	pop	de
	ld	a, (_eth_init)
	bit	0, l
	jr	nz, BB14_11
	or	a, a
	jr	nz, BB14_11
	ld	hl, (ix + 9)
	push	hl
	ld	hl, _eth
	push	hl
	call	_eth_Open
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB14_13
	ld	a, 0
	jr	BB14_14
BB14_9:
	call	_usb_GetRole
	ld	a, l
	bit	4, a
	ld	hl, (ix + 9)
	push	hl
	call	z, _usb_ResetDevice
BB14_10:
	pop	hl
BB14_11:
	or	a, a
	sbc	hl, hl
BB14_12:
	pop	ix
	ret
BB14_13:
	ld	a, 1
BB14_14:
	ld	(_eth_init), a
	jr	BB14_11
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI14_0
JTI14_0:
	dl	BB14_4
	dl	BB14_9
	dl	BB14_4
	dl	BB14_5

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -10
	call	__frameset
	ld	de, 0
	ld	iy, 36106
	ld	hl, _.str
	ld	c, 16
	call	__ishl
	call	__ishrs
	ld	(ix - 7), hl
	ld	hl, _malloc
	ld	(_usr_malloc), hl
	ld	hl, _free
	ld	(_usr_free), hl
	push	iy
	push	de
	push	de
	ld	hl, _eth_event_callback
	push	hl
	call	_usb_Init
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB15_2
	ld	hl, _.str.1
	push	hl
	call	_printf
	pop	hl
BB15_2:
	call	_os_GetCSC
	ld	(ix - 4), a
	cp	a, 54
	jr	nz, BB15_4
	ld	hl, (ix - 7)
	push	hl
	call	_strlen
	pop	de
	push	hl
	ld	hl, (ix - 7)
	push	hl
	ld	hl, _eth
	push	hl
	call	_eth_Write
	pop	hl
	pop	hl
	pop	hl
BB15_4:
	pea	ix - 3
	ld	hl, _eth
	push	hl
	call	_eth_Read
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB15_6
	ld	(ix - 10), hl
	ld	iy, -3145600
	call	_os_ClrLCD
	call	_os_HomeUp
	call	_os_DrawStatusBar
	ld	hl, (ix - 10)
	ld	hl, (hl)
	push	hl
	ld	hl, _.str.2
	push	hl
	call	_printf
	pop	hl
	pop	hl
	ld	hl, (ix - 10)
	push	hl
	call	_free
	pop	hl
BB15_6:
	call	_usb_HandleEvents
	ld	a, (ix - 4)
	cp	a, 15
	jr	nz, BB15_2
	ld	hl, _eth
	push	hl
	call	_eth_Close
	pop	hl
	call	_usb_Cleanup
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_eth_int_buf
_eth_int_buf:
	rb	64

	section	.bss,"aw",@nobits
	public	_usr_free
_usr_free:
	rb	3

	section	.bss,"aw",@nobits
	public	_usr_malloc
_usr_malloc:
	rb	3

	section	.bss,"aw",@nobits
	public	_eth_rx_buf
_eth_rx_buf:
	rb	2048

	section	.bss,"aw",@nobits
	public	_eth_tx_buf
_eth_tx_buf:
	rb	1518

	section	.bss,"aw",@nobits
	public	_eth_init
_eth_init:
	rb	1

	section	.bss,"aw",@nobits
	public	_eth
_eth:
	rb	453

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"This is a test", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"usb init error", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"packet len %u", 10, 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 5f8512f22751066573aa48ac848a6d2195838ac3)"
	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 5f8512f22751066573aa48ac848a6d2195838ac3)"
	extern	_random
	extern	_usb_GetDescriptor
	extern	__Unwind_SjLj_Register
	extern	__indcall
	extern	_malloc
	extern	_usb_ResetDevice
	extern	_usb_GetConfigurationDescriptorTotalLength
	extern	_usb_ScheduleTransfer
	extern	_os_DrawStatusBar
	extern	_memcpy
	extern	__ishl
	extern	_usb_SetEndpointData
	extern	_strlen
	extern	_usb_GetRole
	extern	_usb_UnrefDevice
	extern	__setflag
	extern	_printf
	extern	_usb_GetDeviceFlags
	extern	__sremu
	extern	_os_GetCSC
	extern	_usb_SetDeviceData
	extern	_free
	extern	_usb_ControlTransfer
	extern	_usb_Cleanup
	extern	_os_HomeUp
	extern	_memset
	extern	__frameset
	extern	__indcallhl
	extern	_usb_SetInterface
	extern	__ior
	extern	_os_ClrLCD
	extern	_usb_GetDeviceEndpoint
	extern	_usb_GetEndpointData
	extern	_usb_HandleEvents
	extern	_usb_SetConfiguration
	extern	__ishrs
	extern	__Unwind_SjLj_Unregister
	extern	_usb_RefDevice
	extern	__imulu
	extern	__bshl
	extern	__lcmpu
	extern	_usb_GetStringDescriptor
	extern	__frameset0
	extern	_usb_Init
